{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\n// AI Classification Competition Element IDs\nenum gameElements {\n  mobileGoal,\n  redRing,\n  blueRing,\n};\n\ndigital_out pn = digital_out(Brain.ThreeWirePort.H);\n// AI Vision Color Descriptions\naivision::colordesc eyes__redring(1, 183, 44, 48, 9, 0.1);\naivision::colordesc eyes__bluering(2, 47, 63, 70, 40, 0.9);\n// AI Vision Code Descriptions\nvex::aivision eyes(PORT19, eyes__redring, eyes__bluering, aivision::ALL_AIOBJS);\n\ndigital_out Ipiston = digital_out(Brain.ThreeWirePort.G);\npot check = pot(Brain.ThreeWirePort.A);\nmotor Motor3 = motor(PORT3, ratio18_1, false);\n\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// ----------------------------------------------------------------------------\n//                                                                            \n//    Project:  R- and +                                             \n//    Author: 8025B\n//    Created:1/25/25\n//    Configuration: Competition Template       \n//                                                                            \n// ----------------------------------------------------------------------------\n\n// Include the V5 Library\n#include \"vex.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nmotor lf = motor(PORT7, ratio6_1, true);\nmotor lb = motor(PORT8, ratio6_1, true);\nmotor lt = motor(PORT6, ratio6_1, false);\nmotor_group leftmtrs(lf,lb);\nmotor rb = motor(PORT18, ratio6_1, false);\nmotor rf = motor(PORT17, ratio6_1, false);\nmotor rt = motor(PORT16, ratio6_1, true);\nmotor_group rightmtrs(rf,rb);\ndrivetrain Drivetrain = drivetrain(leftmtrs, rightmtrs, 299.24, 295, 40, mm, 0.6);\nmotor_group r = motor_group(lt, lb,lf);\nmotor_group l = motor_group(rt, rb,rf);\nmotor hook = motor(PORT2, ratio6_1);\nmotor brown = motor(PORT10, ratio18_1);\nmotor intake2 = motor(PORT14, ratio18_1,false);\ncontroller Controller1 = controller();\n\n\nvoid BX(){\n  pn.set(false);\n}\nvoid BB(){\n  pn.set(true);\n}\nvoid R1(){\n  hook.spin(forward);\n}\nvoid R2(){\n  hook.spin(reverse);\n}\nvoid L1(){\n  intake2.spin(reverse);\n}\nvoid L2(){\n  intake2.spin(forward);\n}\nvoid stopintake(){\n  intake2.stop();\n}\nvoid stophook(){\n  hook.stop();\n}\nvoid uup(){\n  Ipiston.set(true);\n}\nvoid ddown(){\n  Ipiston.set(false);\n}\nvoid ba(){\n  brown.spin(reverse);\n}\nvoid by(){\n  brown.spin(forward);\n}\nvoid stop(){\n  brown.stop();\n}\nvoid driveControl() {\n  while (true) {\n    // Driving motors with controller input\n    l.spin(forward, (Controller1.Axis3.position(percent) - Controller1.Axis1.position(percent)) * 12 / 100, volt);\n    r.spin(forward, (Controller1.Axis3.position(percent) + Controller1.Axis1.position(percent)) * 12 / 100, volt);\n    wait(20, msec); // Add a short delay to prevent CPU overload\n  }\n}\nvoid objectDetection() {\n  while(true){\n    eyes.takeSnapshot(eyes__redring);\n    waitUntil(Controller1.ButtonRight.pressing());\n    if (eyes.objectCount > 0) {\nController1.rumble(rumbleLong);\n      hook.setVelocity(90, percent);\n      hook.spin(forward);\n      wait(0.4, seconds);\n      hook.stop();\n      wait(15, msec);\n      hook.setVelocity(50, percent);\n      hook.spin(reverse);\n      wait(60,msec);\n      hook.stop();\n      hook.spinToPosition(100,degrees);\n\n      }\n    \n      else{\n      eyes.takeSnapshot(eyes__bluering);\n      wait(100,msec);\n      if (eyes.objectCount > 0) {\n        Brain.Screen.printAt(10, 50, \"Obj count: %d\", eyes.objectCount);\n        hook.setVelocity(50, percent);\n        hook.spin(forward);\n        wait(1.5, seconds);\n        hook.stop();\n        hook.spinToPosition(100,degrees);\n      }\n    }\n}\n    wait(20, msec); // Add a delay to avoid rapid sensor checks\n  }\n\n\n// Begin project code\n\nvoid preAutonomous(void) {\nvexcodeInit();\n  Ipiston.set(false);\n  Drivetrain.setDriveVelocity(100,percent);\n  Drivetrain.setTurnVelocity(100,percent);\n  hook.setVelocity(50, percent);\n  hook.setMaxTorque(100,percent);\n intake2.setVelocity(100, percent);\n  pn.set(false);\n  brown.setMaxTorque(100,percent);\n  brown.setVelocity(80,percent);\n  brown.setStopping(brake);\n  Controller1.ButtonX.pressed(BX);\n  Controller1.ButtonB.pressed(BB);\n  Controller1.ButtonR1.pressed(R1);\n  Controller1.ButtonR2.pressed(R2);\n Controller1.ButtonL1.pressed(L1);\n Controller1.ButtonL2.pressed(L2);\n Controller1.ButtonL1.released(stopintake);\n Controller1.ButtonL2.released(stopintake);\n Controller1.ButtonR1.released(stophook);\n Controller1.ButtonR2.released(stophook);\n Controller1.ButtonUp.pressed(uup);\n Controller1.ButtonDown.pressed(ddown);\n Controller1.ButtonY.pressed(by);\n Controller1.ButtonA.pressed(ba);\n Controller1.ButtonA.released(stop);\n Controller1.ButtonY.released(stop);\n\n}\n\nvoid autonomous(void) {\n  Ipiston.set(false);\nDrivetrain.setDriveVelocity(100, percent);\nleftmtrs.setVelocity(20,percent);\nrightmtrs.setVelocity(20,percent);\n  Drivetrain.setTurnVelocity(100,percent);\n  hook.setVelocity(55,percent);\n  brown.spin(reverse);\n  wait(1,seconds);\n  brown.stop();\n  pn.set(true);\n  intake2.spin(forward);\n //Going for MoGO\n  leftmtrs.spin(reverse);\n  rightmtrs.spin(reverse);\n  wait(1.5,seconds);\n  pn.set(false);\n  //Clamps\n  wait(0.30,seconds);\n  leftmtrs.stop();\n  rightmtrs.stop();\n\n  //Stops with the MoGo\n  //Turns\nleftmtrs.spin(forward);\n  rightmtrs.spin(reverse);\n  wait(0.90,seconds);\nleftmtrs.stop();\n  rightmtrs.stop();\n  //Goes for 1st donut\n  hook.spin(forward);\n  intake2.spin(forward);\nleftmtrs.spin(forward);\n  rightmtrs.spin(forward);\n  wait(1.5,seconds);\nleftmtrs.stop();\n  rightmtrs.stop();\n\n  //Goes to ladder\nleftmtrs.spin(forward);\n  rightmtrs.spin(reverse);\n\n  wait(1.6,seconds);\nleftmtrs.stop();\n  rightmtrs.stop();\n  \n  Drivetrain.driveFor(forward,55,inches);\n  hook.stop();\n  intake2.stop();\n  //Done*/\n\n  wait(5, msec);\n}\nvoid userControl(void){\n  Ipiston.set(false);\n    thread driveThread = thread(driveControl);\n  thread detectThread = thread(objectDetection);\n}\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n vexcodeInit();\n  // create competition instance\n  competition Competition;\n\n  // Set up callbacks for autonomous and driver control periods.\n  Competition.autonomous(autonomous);\n  Competition.drivercontrol(userControl);\n\n  \n  // Run the pre-autonomous function.\n  preAutonomous();\n\n  // Prevent main from exiting with an infinite loop.\n  while (true) {\n    wait(100, msec);\n  }\n}","textLanguage":"cpp","robotConfig":[{"port":[8],"name":"pn","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[19],"name":"eyes","customName":true,"deviceType":"AIVision","deviceClass":"aivision","setting":{"config":"{\"colors\":[{\"id\":1,\"name\":\"redring\",\"nameValid\":\"Valid\",\"lastValidName\":\"redring\",\"red\":182.80934959349594,\"green\":44.198983739837395,\"blue\":48.34481707317073,\"hueRange\":9,\"saturationRange\":0.1},{\"id\":2,\"name\":\"bluering\",\"nameValid\":\"Valid\",\"lastValidName\":\"bluering\",\"red\":47.09221277986599,\"green\":63.17662199705834,\"blue\":70.35528681157052,\"hueRange\":40,\"saturationRange\":0.9}],\"codes\":[],\"tags\":false,\"AIObjects\":true,\"AIObjectModel\":[\"Ball(Blue)\",\"Ball(Green)\",\"Ball(Red)\",\"Ring(Blue)\",\"Ring(Green)\",\"Ring(Red)\",\"Cube(Blue)\",\"Cube(Green)\",\"Cube(Red)\"],\"AIModelMetadata\":{\"id\":258,\"version\":190920704,\"name\":\"Bs\"},\"aiModelDropDownValue\":\"2024-2025 High Stakes\"}","isConfigured":"false"},"triportSourcePort":22},{"port":[7],"name":"Ipiston","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{},"triportSourcePort":22},{"port":[1],"name":"check","customName":true,"deviceType":"Potentiometer","deviceClass":"pot","setting":{},"triportSourcePort":22},{"port":[3],"name":"Motor3","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":3,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}